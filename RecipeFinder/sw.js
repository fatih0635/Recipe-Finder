const CACHE_NAME = 'recipe-app-v3'; // üìå Versiyon artƒ±rƒ±ldƒ±
const DYNAMIC_CACHE = 'dynamic-cache-v3';

const ASSETS = [
  '/',
  '/index.html',
  '/offline.html',  // üìå Offline sayfasƒ± √∂nbelleƒüe ekleniyor
  '/styles/style.css',
  '/scripts/app.js',
  '/icons/icon-144x144.png',
  '/icons/icon-192x192.png',
  '/icons/icon-512x512.png',
];

// üìå API √ßaƒürƒ±larƒ± i√ßin izin verilen domainler
const API_HOSTS = ['api.spoonacular.com', 'api.opencagedata.com'];

// ‚úÖ Install Event - Statik Dosyalarƒ± √ñnbelleƒüe Alma
self.addEventListener('install', (event) => {
  event.waitUntil(
    caches.open(CACHE_NAME).then((cache) => {
      console.log('üì¶ Caching static assets...');
      return cache.addAll(ASSETS);
    }).catch((err) => {
      console.error('‚ùå Cache Storage Error:', err);
    })
  );
  self.skipWaiting(); // Yeni service worker hemen aktif olsun
});

// ‚úÖ Activate Event - Eski √ñnbellekleri Temizle
self.addEventListener('activate', (event) => {
  event.waitUntil(
    caches.keys().then((cacheNames) => {
      return Promise.all(
        cacheNames
          .filter((cache) => cache !== CACHE_NAME && cache !== DYNAMIC_CACHE)
          .map((cache) => caches.delete(cache))
      );
    })
  );
  console.log('‚ö° Service Worker activated.');
  return self.clients.claim();
});

// ‚úÖ Fetch Event - Offline Desteƒüi Saƒüla
self.addEventListener('fetch', (event) => {
  const url = new URL(event.request.url);

  // üåç API √ßaƒürƒ±larƒ± i√ßin (Aƒü √ñncelikli Strateji)
  if (API_HOSTS.includes(url.hostname)) {
    event.respondWith(
      fetch(event.request)
        .then((response) => {
          return caches.open(DYNAMIC_CACHE).then((cache) => {
            cache.put(event.request, response.clone());
            return response;
          });
        })
        .catch(() => caches.match('/offline.html')) // üî¥ Eƒüer internet yoksa offline.html d√∂nd√ºr
    );
    return;
  }

  // üóÇÔ∏è Statik Dosyalar i√ßin (√ñnbellek √ñncelikli Strateji)
  event.respondWith(
    caches.match(event.request).then((cachedResponse) => {
      return cachedResponse || fetch(event.request)
        .then((networkResponse) => {
          return caches.open(DYNAMIC_CACHE).then((cache) => {
            cache.put(event.request, networkResponse.clone());
            return networkResponse;
          });
        })
        .catch(() => caches.match('/offline.html')); // üî¥ Eƒüer sayfa isteƒüi ise, offline sayfasƒ±nƒ± g√∂ster
    })
  );
});

// ‚úÖ Background Sync - Tarifleri Arkaplanda Senkronize Etme
self.addEventListener('sync', (event) => {
  if (event.tag === 'sync-recipes') {
    event.waitUntil(syncRecipes());
  }
});

async function syncRecipes() {
  console.log('üîÑ Syncing recipes...');
  // üìå Buraya IndexedDB senkronizasyon kodlarƒ±nƒ± ekleyebilirsin
}

// ‚úÖ Push Notification (Opsiyonel)
self.addEventListener('push', (event) => {
  const options = {
    body: 'üçΩÔ∏è Yeni bir tarif var!',
    icon: '/icons/icon-192x192.png',
    badge: '/icons/icon-192x192.png'
  };
  event.waitUntil(
    self.registration.showNotification('Recipe Finder', options)
  );
});
